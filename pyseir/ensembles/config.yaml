n_years: 2
n_samples: 250
skip_plots: True
generate_report: True
run_mode: 'default'
suppression_policy: [0.35, 0.5, 0.75, 1]
output_percentiles: [5, 25, 32, 50, 75, 68, 95]

override:
  R0:
    value: 3.6
  delta:
    value: 1/6.
  sigma:
    value: 1/3.
  mortality_rate:
    value: 0.0109
  mortality_rate_no_general_beds:
    value:  0.1
  mortality_rate_no_ICU_beds:
    value:  0.
  fraction_icu_requiring_ventilator:
    value: 0.44
  hospitalization_length_of_stay_general:
    value: 6
  hospitalization_length_of_stay_icu:
    value: 14
  hospitalization_length_of_stay_icu_and_ventilator:
    value: 14
  hospitalization_rate_general:
    value: 0.0727
  hospitalization_rate_icu:
    func:
      value: 'lambda x, hospitalization_rate_general: 0.1397 * hospitalization_rate_general'
      params:
      - 'hospitalization_rate_general'
  symptoms_to_hospital_days:
    value: 6
  hospitalization_to_confirmed_case_ratio:
    func:
      value: 'lambda x, cases: 1/4 if (len(cases) > 0) & (max(cases, default=-1) > 0) else x'
      params:
        - 'cases'
  HGen_initial:
    func:
      value: 'lambda x, cases, hospitalization_to_confirmed_case_ratio, hospitalization_rate_icu:
              cases.max() * hospitalization_to_confirmed_case_ratio * (1 - hospitalization_rate_icu)
              if (len(cases) > 0)
              & (max(cases, default=-1) > 0)
              & (hospitalization_to_confirmed_case_ratio is not None)
              & (hospitalization_rate_icu is not None) else x'
      params:
      - 'cases'
      - 'hospitalization_to_confirmed_case_ratio'
      - 'hospitalization_rate_icu'
  HICU_initial:
    func:
      value: 'lambda x, cases, hospitalization_to_confirmed_case_ratio, hospitalization_rate_icu:
              cases.max() * hospitalization_to_confirmed_case_ratio * hospitalization_rate_icu
              if (len(cases) > 0)
              & (max(cases, default=-1) > 0)
              & (hospitalization_to_confirmed_case_ratio is not None)
              & (hospitalization_rate_icu is not None)
              else x'
      params:
      - 'cases'
      - 'hospitalization_to_confirmed_case_ratio'
      - 'hospitalization_rate_icu'
  HICUVent_initial:
    func:
      value: 'lambda x, HICU_initial, fraction_icu_requiring_ventilator:
               HICU_initial * fraction_icu_requiring_ventilator
               if (HICU_initial is not None)
               & (fraction_icu_requiring_ventilator is not None)
               else x'
      params:
      - 'HICU_initial'
      - 'fraction_icu_requiring_ventilator'

  I_initial:
    func:
      value: 'lambda x, cases: 1.0 * 3.43 * cases.max()
             if (len(cases) > 0)
             & (max(cases, default=-1) > 0)
             else 1'
      params:
      - 'cases'
  A_initial:
    func:
      value: 'lambda x, cases: 1.0 * 3.43 * cases.max()
                 if (len(cases) > 0)
                 & (max(cases, default=-1) > 0)
                 else 1'
      params:
      - 'cases'
  gamma:
    value: 1
  E_initial:
    func:
      value: 'lambda x, I_initial, A_initial: 1.2 * (I_initial + A_initial)'
      params:
      - 'I_initial'
      - 'A_initial'
  D_initial:
    func:
      value: 'lambda x, deaths: deaths.max() if (len(deaths) > 0) & (max(deaths, default=-1) > 0) else x'
      params:
      - 'deaths'
